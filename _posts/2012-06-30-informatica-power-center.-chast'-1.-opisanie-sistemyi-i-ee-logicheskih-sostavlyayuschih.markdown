---
layout: post
title: Informatica Power Center. Часть 1. Описание системы и ее логических составляющих 
lang: ru
---

Informatica Power Center — отличное ETL-средство, предназначенное для быстрого ETL-а из гетерогенных сред. Очень простое (малый порог вхождения) и быстрое, с большим функционалом, поддерживающее все промышленные СУБД. Основное применение находит в банковских системах. В банке, где я работаю, на IPC строится уже 3-я версия корпоративного DWH. Причем, что меня особенно удивило, на IPC-же реализуется бизнес-логика. Оно, наверное и понятно, т.к. всем кажется, что таскать стрелочки из одной таблицы в другую, заменяя часть атрибутов по простым правилам — намного легче, чем написать код и потом его поддерживать. На практике же получаются очень сложные конструкции, в которых (как мне кажется) сложнее отыскать ошибку. Да и вопросы производительности отправлены на второй план — по мощнее сервер, и все нормально.

IPC представляет из себя сервер, в котором разворачивается домен — совокупность для репозиториев. Репозиторий — сущность IPC, находящаяся на одном уровне с бизнес-проектом. На каждый проект заводится свой репозиторий, в результате проекты не мешают друг другу, и могут разрабатываться параллельно. 

В репозитории создаются папки. Папка — хранилище объектов IPC всех типов. Используется для разделения групп объектов внутри бизнес-проекта. Мы, для своей системы, не смогли придумать более простого и понятного разделения, чем разделить проект на 4 части (папки) — EXTRACT, TRANSFORM, LOAD, SHARED (папка с объектами, которые будут использоваться в других папках). Папка может быть shared, т.е. в других папках можно создавать ярлыки на объекты в шаред-папке — так реализован code reuse.

В папке все объекты разделены на несколько типов: 

  * sources — источники данных. Описание таблиц/файлов в соответствующих системах-источниках
  * targets — приемники данных. Описание таблиц/файлов в соответствующих системах-приемниках
  * transformations — reusable-преобразования, например: последовательности, выражения (суть функции), лукапы (суть просмотр значения по ключу), java-преобразования и т.д.
  * mapings — основные сущности, несущие логику процесса. Описания процесса трансформации данных. В маппинге обязательно есть источник (один из sources) и приемник (один из targets). У источника есть Source Qualifier (SQ), определяющий, как и какие именно данные забирать. Между источником и приемником могут быть различные трансформации данных. Собственно, в маппинге и описывается весь ETL-процесс
  * mapplets — для повторного использования часть маппинга (набор транформаций) можно выделить в отдельную сущность — мапплет, а в маппинге уже использовать его. Опять для code reuse.
  * session — отражение логического маппинга на физическую структуру. На уровне сессии определяются физические параметры — соединения к БД, типы операции (insert/update/delete), интервалы коммита, и т.д.
  * tasks — задания. Аналогично сессиям, только если сессии определяют маппинги, то задания определяют различные действия, которые может выполнить IPC: послать e-mail, записать файл, выполнить команду ОС и др.
  * workflows — потоки. Это набор сессий и заданий, соединенных для запуска последовательно и/или параллельно. Запускаются именно потоки и больше ничего кроме потоков. Нельзя запустить отдельно маппинг или сессию — только в рамках потока. 
  * worklets — ворклеты. Часть сессий/заданий можно выделить в ворклет, и затем в потоке уже использовать ворклет. Опять для code reuse.
